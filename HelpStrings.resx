<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="abs" xml:space="preserve">
    <value>The absolute value function
  abs(x)
  
Returns the absolute value of x, x for (x &gt;= 0) and -x for (x &lt; 0).</value>
  </data>
  <data name="acos" xml:space="preserve">
    <value>The arccosine function
  acos(x)
  
Returns the arccosine of x. That is, if cos(y) = x, then acos(x) = y.</value>
  </data>
  <data name="acot" xml:space="preserve">
    <value>The arccotangent function
  acot(x)
  
Returns the arccotangent of x. That is, if cot(y) = x, then acot(x) = y.</value>
  </data>
  <data name="acsc" xml:space="preserve">
    <value>The arccosecant function
  acsc(x)
  
Returns the arccosecant of x. That is, if csc(y) = x, then acsc(x) = y.</value>
  </data>
  <data name="asec" xml:space="preserve">
    <value>The arcsecant function
  asec(x)
  
Returns the arcsecant of x. That is, if sec(y) = x, then asec(x) = y.</value>
  </data>
  <data name="asin" xml:space="preserve">
    <value>The arcsine function
  asin(x)
  
Returns the arcsine of x. That is, if sin(y) = x, then asin(x) = y.</value>
  </data>
  <data name="atan" xml:space="preserve">
    <value>The arctangent function
  atan(x)
  
Returns the arctangent of x. That is, if tan(y) = x, then atan(x) = y.</value>
  </data>
  <data name="atan2" xml:space="preserve">
    <value>The atan2 function
  atan(y, x)
  
Returns the arctangent of y/x.</value>
  </data>
  <data name="ceil" xml:space="preserve">
    <value>The ceiling function
  ceil(x)
  
Returns the lowest integer that is greater than or equal to x.</value>
  </data>
  <data name="commands" xml:space="preserve">
    <value />
  </data>
  <data name="cos" xml:space="preserve">
    <value>The cosine function
  cos(x)
  
Returns the cosine of x.</value>
  </data>
  <data name="cot" xml:space="preserve">
    <value>The cotangent function
  cot(x)
  
Returns the cotangent of x, which is equal to 1 / tan(x).</value>
  </data>
  <data name="csc" xml:space="preserve">
    <value>The cosecant function
  csc(x)
  
Returns the cosecant of x, which is equal to 1 / sin(x).</value>
  </data>
  <data name="derive" xml:space="preserve">
    <value>The derive operator
  derive(f(x), x)
  
Returns the derivative of f(x) with respect to x.</value>
  </data>
  <data name="floor" xml:space="preserve">
    <value>The floor function
  floor(x)
  
Returns the highest integer that is less than or equal to x.</value>
  </data>
  <data name="functions" xml:space="preserve">
    <value />
  </data>
  <data name="help" xml:space="preserve">
    <value>Ligra - Advanced Mathematics Visualization and Simulation Program

General Help: 
  help &lt;topic&gt; 
 
Available Topics: 
  Ligra 
   
  Functions: cos, sin, tan, sec, csc, cot, acos,   
             asin, atan, atan2, asec, acsc, acot,   
             ln, log, log2, log10, sqrt,  
             int, abs, rand, ceil, u 

  Operators: + - * / 
   
  Special: derive 
   
  Plotting: plot, plot3d;
  
  Commands: help, clear, vars, delete, history, example</value>
  </data>
  <data name="ligra" xml:space="preserve">
    <value />
  </data>
  <data name="ln" xml:space="preserve">
    <value>The natural logarithm function</value>
  </data>
  <data name="log" xml:space="preserve">
    <value />
  </data>
  <data name="log10" xml:space="preserve">
    <value />
  </data>
  <data name="log2" xml:space="preserve">
    <value />
  </data>
  <data name="operators" xml:space="preserve">
    <value />
  </data>
  <data name="plot" xml:space="preserve">
    <value>Curve Plot
  plot(x, f1(x), f2(x), ... fn(x))
  
  x - independent variable that defines the "x axis"
  fn(x) - the expressions to plot

  Plots one or more curves.</value>
  </data>
  <data name="plot3d" xml:space="preserve">
    <value>3D Surface Plot
  plot3d(x, y, f(x,y))
  plot3d(x, y, f(x,y), fillColor)
  plot3d(x, y, f(x,y), fillColor, wireColor)
  plot3d(x, y, f(x,y), xMin, xMax, yMin, yMax, zMin, zMax)
  plot3d(x, y, f(x,y), xMin, xMax, yMin, yMax, zMin, zMax, fillColor, wireColor)
  
  x - first independent variable
  y - second independent variable
  f(x,y) - the expression to plot
  fillColor - the color of the surface of the plot; default is green
  wireColor - the color of the wireframe of the plot; default is black
  xMin, xMax - the minimum and maximum values along the first independent variable for the plot
  yMin, yMax - the minimum and maximum values along the second independent variable for the plot
  zMin, zMax - the minimum and maximum values of the function to allow. Values outside this range are clipped

  Plots f(x,y) as a surface in three dimensions.</value>
  </data>
  <data name="plotting" xml:space="preserve">
    <value />
  </data>
  <data name="rand" xml:space="preserve">
    <value />
  </data>
  <data name="sec" xml:space="preserve">
    <value />
  </data>
  <data name="sin" xml:space="preserve">
    <value>The sine function
  sin(x)
  
Returns the sine of x.</value>
  </data>
  <data name="special" xml:space="preserve">
    <value>symbolic calculus</value>
  </data>
  <data name="sqrt" xml:space="preserve">
    <value>square root</value>
  </data>
  <data name="t" xml:space="preserve">
    <value>default time variable</value>
  </data>
  <data name="tan" xml:space="preserve">
    <value />
  </data>
  <data name="u" xml:space="preserve">
    <value>unit step function</value>
  </data>
  <data name="variables" xml:space="preserve">
    <value />
  </data>
</root>