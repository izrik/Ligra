
(in no particular order)

parametrics and plots
    Once we have parametric exressions in solus, we'll be able to treat the
            "for x=..." as part of the expression instead of part of the plot
            command. we should be able to start plotting a wider variety of
            things, without having to explicitly state the the dimensions and
            variables and such. So  "plot sin(x) for -5<x<5" can be replaced
            with "plot sin(x)" and still plot the sine wave. The "for" and
            boundaries on the variable are no longer necessary. If they are not
            provided, the plot command can make some educated guesses about
            good defaults for the view boundaries.
    "plot [f(s), g(s)] for 0<=s<=2*pi" should be a 2d parameteric plot: 2+1
    "plot [f(s), g(s), s] for 0<=s<=2*pi" should be a 3d plot: 3+1
    "plot f(x, y) for (0<=x<=4*pi, 0<=y<=1)" 3d surface plot: 1+2
    "plot [f(a,b), g(a,b)] for (a=..., b=...)" 2d plot: 2+2

    "plot sin(x+y) for (x=...,y=...)" - 2 inputs, 1 output
    "plot [sin(s), cos(s), s] for s in [0,4pi)" - i input, 3 outputs
    "plot sin(x) for x=..." 2d plot, 1 input, 1 output
    "plot f(x,t) for (x=...,t=...)" 2 inputs, 1 output -> 3d plot, not animated
    "plot f(x,t) for x=..." 1+1 inputs, 1 output -> 2d plot, animated
    "plot f(t)" 0+1 inputs, 1 output -> 1d animated? 2d not animated?
    "plot f(t) for t=..." 1 input, 1 output -> 2d not animated
    "plot [sin(s+t), cost(s+t), s]" 1+1 inputs, 3 outputs -> 3d animated
    "plot [a,b;c,d] for ..." -> doesn't make sense
    "plot [sin(s), cos(s/2)] for s=..." 1 input, 2 outputs -> 2d plot

    "plot sin(x)" 2d plot?

    "plot {[1,2], [3,4], [5,6]}" plot of set of 2d vectors: 2d plot
    "plot [1,2]" plot of single 2d vector?
    "plot {[1,2,3], [4,5,6]}" plot of set of 3d vectors: 3d plot
    "plot a for a in A" depends on what A is

    "plot sin" ??? just the function itself? infer inputs and outputs?
        requires unified namespace and related fixes to macros and parsing

replace gtk text measuring and rendering with our own system
    the marshalling and unmarshalling to and from unmanaged code is causing a metric ton of allocations

fix scrolling
opentk
help
nugetize everything
sphere plot
vtol engine

new terminal/console-style LigraControl
    remove the textbox and eval button, splitter, toolstripcontainer, etc.

audio simulation

fem

strange materials

export to stl
    per-renderitem context menus
cad
